buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }

    repositories {
        mavenLocal()
        mavenCentral()

        jcenter()

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'net.ltgt.apt' version '0.8'
    id 'org.hidetake.swagger.generator' version '2.14.0'
    id "org.sonarqube" version "2.7"
}
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {

    jcenter()

    mavenCentral()
}

ext {
    mapstructVersion = "1.3.0.Final"
    lombokVersion = "1.18.8"
    swaggerVersion = "2.9.2"
    generatedDir = "build/generated-sources"
}

sourceCompatibility = JavaVersion.VERSION_1_8


dependencies {


    compile 'org.mongodb:mongodb-driver:3.6.1'

    compile 'com.google.guava:guava:23.6-jre'
    compile 'com.github.jknack:handlebars:4.0.6'
    
    compile 'com.sendgrid:sendgrid-java:4.1.2'
    compile 'org.mindrot:jbcrypt:0.4'
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-mail'
    compile'org.springframework.boot:spring-boot-starter-webflux'
    compile 'org.springframework.boot:spring-boot-starter-websocket'
    compile 'org.springframework.security:spring-security-messaging'
    compile "io.springfox:springfox-swagger2:${swaggerVersion}"
    compile "io.springfox:springfox-swagger-ui:${swaggerVersion}"
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework.security:spring-security-test'
    testCompile 'junit:junit:4.12'
    testCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.1.1'
    testCompile 'cz.jirutka.spring:embedmongo-spring:1.3.1'

    compile 'net.bytebuddy:byte-buddy:1.10.1'

    compile 'com.cloudinary:cloudinary-http44:1.19.0'

    compile 'com.google.api-client:google-api-client:1.27.0'

    compileOnly("org.mapstruct:mapstruct-jdk8:${mapstructVersion}")
    annotationProcessor( "org.mapstruct:mapstruct-processor:${mapstructVersion}")

    annotationProcessor("org.projectlombok:lombok:$lombokVersion")
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
    testCompileOnly("org.projectlombok:lombok:$lombokVersion")
//    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.0'
    swaggerCodegen 'io.swagger:swagger-codegen-cli:2.3.1'
}

swaggerSources {
    contest {
        inputFile = file('src/main/resources/swagger/codemaster.yaml')
        code {
            outputDir = file('build/generated-sources')
            configFile = file('src/main/resources/swagger/codemaster-config.json')
            library = 'resttemplate'
            language = 'java'
            components = [
                    "apiTests": false,
                    "modelDocs": false,
                    "apiDocs": false
            ]
        }
    }
}

task removeSwaggerTrash {
    doLast {
        def generatedDir = file(generatedDir)
        println "Deleting swagger trash from  ${generatedDir}"
        def remainOnlyContestPackage = {
            if (it.name != "ru") {
                println "Deleting ${it.name}"
                it.delete()
                it.deleteDir()
            }
        }
        generatedDir.eachFile(remainOnlyContestPackage)
    }
}



removeSwaggerTrash.dependsOn generateSwaggerCode
compileJava.dependsOn removeSwaggerTrash
sourceSets.main.java.srcDir "${swaggerSources.contest.code.outputDir}"